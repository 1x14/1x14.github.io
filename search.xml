<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>汇编基础知识（二）</title>
    <url>/2022/04/03/2/</url>
    <content><![CDATA[<h1 id="第六章、包含多个段的程序"><a href="#第六章、包含多个段的程序" class="headerlink" title="第六章、包含多个段的程序"></a>第六章、包含多个段的程序</h1><p>汇编语言相关基础内容（二）</p>
<span id="more"></span>

<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>程序需要获取一段内存空间，两种方法：</p>
<ol>
<li>在加载程序的时候为程序分配</li>
<li>程序在执行的时候向系统申请</li>
</ol>
<p>在加载程序的时候为程序分配，就需要在源程序中做出说明，定义一个段来获取内存空间。</p>
<h3 id="代码段中使用数据"><a href="#代码段中使用数据" class="headerlink" title="代码段中使用数据"></a>代码段中使用数据</h3><p>在程序开头部分定义我们需要处理的数据，数据就会被编译、连接到可执行文件中，然后被加载到内存里。</p>
<p>dw（定义字型数据）</p>
<p>dw定义的数据处于代码段最开始，偏移地址为0，可以用[bx]循环，就能指向全部数据。</p>
<hr>
<p>在执行程序的时候，需要确定程序入口的位置，用start来标志，结束的位置用end start对应标志。</p>
<h3 id="将数据、代码、栈放入不同的段"><a href="#将数据、代码、栈放入不同的段" class="headerlink" title="将数据、代码、栈放入不同的段"></a>将数据、代码、栈放入不同的段</h3><p>mov ax,data    就是将数据data的段地址存入ax寄存器中，在将ax的值传给段寄存器，就可以保存数据data的段地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,c			</span><br><span class="line">mov ss,ax		//将c段作为一个栈空间，栈底指向ss:20h</span><br><span class="line">mov sp,20h</span><br></pre></td></tr></table></figure>

<h1 id="第七章、更灵活的定位内存地址的方法"><a href="#第七章、更灵活的定位内存地址的方法" class="headerlink" title="第七章、更灵活的定位内存地址的方法"></a>第七章、更灵活的定位内存地址的方法</h1><h3 id="and和or指令"><a href="#and和or指令" class="headerlink" title="and和or指令"></a>and和or指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 0 0 0 0 0 0 0</span><br><span class="line">第几位，是从右边开始数，最右边为第0位，向左递增。</span><br></pre></td></tr></table></figure>

<h4 id="and指令"><a href="#and指令" class="headerlink" title="and指令"></a>and指令</h4><p>按位进行逻辑与运算。同时为1，结果为1；否则为0。</p>
<p>该运算可将操作对象的相应位设为0，其他不变。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov al,01100011B</span><br><span class="line">and al,00111011B</span><br><span class="line"></span><br><span class="line">运算结果：</span><br><span class="line">al =000100011B</span><br><span class="line">将al第五位设置位0，指令：and al,11011111</span><br><span class="line"></span><br><span class="line">运算的时候，设置一个数11111111，</span><br><span class="line">将哪一位设置为0，根据与运算的关系，只需将（11111111）中的那一位改成0即可</span><br></pre></td></tr></table></figure>



<h4 id="or指令"><a href="#or指令" class="headerlink" title="or指令"></a>or指令</h4><p>按位进行逻辑或运算。一个为1，结果为1；否则为0。</p>
<p>该运算可将操作对象相应位设为1，其他不变。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">or指令运算和and类似</span><br></pre></td></tr></table></figure>

<h3 id="以字符形式给出的数据"><a href="#以字符形式给出的数据" class="headerlink" title="以字符形式给出的数据"></a>以字符形式给出的数据</h3><p>计算机中字符需要通过ASCII码来间接转换，然后再显示（显存中）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db ‘ABCD’</span><br><span class="line">mov ax,&#x27;A&#x27;			//这个相当于 mov ax,41H</span><br></pre></td></tr></table></figure>

<h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><p>字母的大小写也有一定的关联。大写字母的ASCII值加上20，等于小写字母的ASCII值。</p>
<p>大小写字母的二进制数，在第五位有所区别。大写字母二进制第五位为0，小写字母第五位为1。</p>
<p>通过这一点，就可以用到之前的and，or指令来转换大小写字母。</p>
<h3 id="bx-idata"><a href="#bx-idata" class="headerlink" title="[bx+idata]"></a>[bx+idata]</h3><p>[bx]为一个内存单元，[bx+idata]也一样，偏移地址变为 （bx的值加上idata）</p>
<h3 id="si和di"><a href="#si和di" class="headerlink" title="si和di"></a>si和di</h3><p>si 和 di 是和 bx 功能相近的寄存器，但 si 和 di 不能分成两个8为的寄存器。</p>
<p>也就引出[bx+si]和[bx+di]指令，功能都类似，只不过si，di都是可变的量。</p>
<h1 id="第八章、数据处理的两个基本问题"><a href="#第八章、数据处理的两个基本问题" class="headerlink" title="第八章、数据处理的两个基本问题"></a>第八章、数据处理的两个基本问题</h1><p>寄存器reg：ax、bx、cx、dx、ah、al、bh、bl、ch、cl、dh、dl、dp、sp、bp、si、di</p>
<p>寄存器sreg：ds、ss、cs、es</p>
<h3 id="bx、si、di、和bp"><a href="#bx、si、di、和bp" class="headerlink" title="bx、si、di、和bp"></a>bx、si、di、和bp</h3><ol>
<li>这四个寄存器可以单独出现，也可以组合出现。</li>
</ol>
<p>​        [bx]、[si]、[di]、[bp]、[bx+si、[bx+di]、[bp+si]、[bp+di]</p>
<ol start="2">
<li><p>[bx+bp]、[si+di]这些指令都是错误的</p>
</li>
<li><p>使用寄存器bp时，如果没有给出显性的段地址，段地址默认再ss中</p>
</li>
</ol>
<h3 id="机器指令处理的数据在什么地方"><a href="#机器指令处理的数据在什么地方" class="headerlink" title="机器指令处理的数据在什么地方"></a>机器指令处理的数据在什么地方</h3><ol>
<li><p><strong>立即数</strong><br>直接包含在机器指令中的数据（执行前在CPU的指令缓冲器中）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,1</span><br></pre></td></tr></table></figure></li>
<li><p><strong>寄存器</strong><br>汇编指令中给出相应的寄存器名称，即处理的数据在寄存器中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ds,ax</span><br></pre></td></tr></table></figure></li>
<li><p><strong>段地址和偏移地址</strong><br>【X】这种格式的数据，在内存中。根据X的内容可以判断默认存储在什么段寄存器中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,[0]</span><br><span class="line">mov ax,[bx]</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="指令处理数据的长度"><a href="#指令处理数据的长度" class="headerlink" title="指令处理数据的长度"></a>指令处理数据的长度</h3><p>数据的长度在机器指令需要指明，指令进行的是字操作还是字节操作。</p>
<ol>
<li><p>直接通过寄存器指明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,1	// 16位寄存器进行的字操作</span><br><span class="line">mov ah,2	// 8位寄存器进行的字节操作</span><br></pre></td></tr></table></figure></li>
<li><p>X ptr指明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov word ptr ds:[0],1	// word ptr指明是字操作</span><br><span class="line">mov byte ptr ds:[0],1	// byte ptr指明是字节操作</span><br></pre></td></tr></table></figure></li>
<li><p>push指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push[1000h]		//push指令只进行字操作</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="div指令（除法指令）"><a href="#div指令（除法指令）" class="headerlink" title="div指令（除法指令）"></a>div指令（除法指令）</h3><ol>
<li><strong>除数</strong>：8位和16位，在寄存器或内存单元中存储。</li>
<li>被除数：默认在ax和dx中。除数8位，被除数则为16位，默认在ax中；除数16位，被除数则32位，在ax和dx中存放，dx存放高16位，ax存放低16位。</li>
<li><strong>结果</strong>：除数8位，则al存储商，ah存储余数；除数16位，则ax存储商，dx存储余数。</li>
</ol>
<h3 id="伪指令dd"><a href="#伪指令dd" class="headerlink" title="伪指令dd"></a>伪指令dd</h3><p>db指令定义字节型数据，dw指令定义字型数据，dd指令定义双字型数据。</p>
<h3 id="dup指令（倍数指令）"><a href="#dup指令（倍数指令）" class="headerlink" title="dup指令（倍数指令）"></a>dup指令（倍数指令）</h3><p>dup也是一个由编译器识别处理的符号，可以用来进行数据的重复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db 3 dup(0)			//相当于db 0，0，0</span><br><span class="line"></span><br><span class="line">结果为 0 0 0</span><br></pre></td></tr></table></figure>

<h1 id="第九章、转移指令的原理"><a href="#第九章、转移指令的原理" class="headerlink" title="第九章、转移指令的原理"></a>第九章、转移指令的原理</h1><h4 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h4><p>可以修改 IP，或同时修改 CS 和 IP 的指令统称为转移指令。（转移指令也就是可以控制CPU中某处代码的指令）。</p>
<p>jmp 寄存器：只修改IP  （段内转移）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmp ax</span><br></pre></td></tr></table></figure>

<p>jmp 内存地址：同时修改CS和IP  （段间转移）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmp 1000：0</span><br></pre></td></tr></table></figure>

<h3 id="操作符offset"><a href="#操作符offset" class="headerlink" title="操作符offset"></a>操作符offset</h3><p>功能：取得标号的偏移地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">	start: mov ax.offset start			//相当于 mov ax,0</span><br><span class="line">	s:	   mov ax,offset s				//相当于 mov ax,3</span><br><span class="line">	</span><br><span class="line">	第一个mov ax，0，是因为start位于开头位置，偏移地址为0</span><br><span class="line">	第二个mov ax，3，是因为第一个指令机器码占了3个字节，所以到 s 的位置时，偏移地址变成了3</span><br></pre></td></tr></table></figure>

<h3 id="jmp指令"><a href="#jmp指令" class="headerlink" title="jmp指令"></a>jmp指令</h3><p>jmp为无条件转移指令，可以只修改IP，也可以同时修改CS和IP</p>
<p>jmp指令使用：</p>
<ol>
<li>转移的目的地址</li>
<li>转移的距离（段间转移，段内短转移，段内近转移）</li>
</ol>
<h3 id="根据转移的距离的不同指令"><a href="#根据转移的距离的不同指令" class="headerlink" title="根据转移的距离的不同指令"></a>根据转移的距离的不同指令</h3><h4 id="jmp-short-标号"><a href="#jmp-short-标号" class="headerlink" title="jmp short 标号"></a>jmp short 标号</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">	strat: mov ax,0</span><br><span class="line">		   jmp short,s</span><br><span class="line">		   add ax,1</span><br><span class="line">		s: inc ax</span><br></pre></td></tr></table></figure>

<p>执行指令jmp后，跳转到 s 标号处的指令，add ax，1指令就未执行。</p>
<p>使用debug打开查看每一步进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先-u查看后</span><br><span class="line">079c：0000	B80000		MOV AX,0000</span><br><span class="line">079c：0003	EB03		JMP 0008		//在这个位置可以看出虽然时jmp 0008，但是机器码显示的03</span><br><span class="line">079c：0005	83C001		ADD AX,+01</span><br><span class="line">079c：0008	40			INC AX</span><br></pre></td></tr></table></figure>

<p>修改一下代码看看</p>
<pre><code>assume cs:codesg
codesg segment

    strat: mov ax,0
           mov bx,0            //在jmp前面加一行
              jmp short,s
           add ax,1
        s: inc ax
</code></pre>
<p>结果发现对应的机器码还是一样的 EB03。这说明 <strong>CPU在执行jmp指令的时候并不需要转移的目的地址。</strong></p>
<hr>
<p>实际上，在机器指令中的EB03，并不是转移的目的地址，而是转移的位移。</p>
<p><strong>jmp short 标号 的功能：(IP)=(IP)+8位位移</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01. 8位位移 = 标号处的地址 - jmp指令后的第一个字节的地址</span><br><span class="line">02. short指明此处的位移为8位位移</span><br><span class="line">03.	8位位移的范围为 -128~127，用补码表示</span><br><span class="line">04. 8位位移由编译程序在编译时算出</span><br></pre></td></tr></table></figure>

<p>还有一个类似的指令：jmp near ptr 标号   （实现的是段内近转移）</p>
<p><strong>jmp near ptr 标号 的功能：(IP)=(IP)+16位位移</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01. 16位位移 = 标号处的地址 - jmp指令后的第一个字节的地址</span><br><span class="line">02. near ptr指明此处的位移为16位位移,进行的是段内近转移</span><br><span class="line">03.	16位位移的范围为 -32768~32767，用补码表示</span><br><span class="line">04. 16位位移由编译程序在编译时算出</span><br></pre></td></tr></table></figure>

<h3 id="转移的目的地址在指令中的jmp指令"><a href="#转移的目的地址在指令中的jmp指令" class="headerlink" title="转移的目的地址在指令中的jmp指令"></a>转移的目的地址在指令中的jmp指令</h3><p>jmp short 标号；jmp near ptr 标号。这两个指令中并没有转移的目的地址，而是相对于当前IP的转移位移</p>
<h4 id="jmp-far-ptr-标号"><a href="#jmp-far-ptr-标号" class="headerlink" title="jmp far ptr 标号"></a>jmp far ptr 标号</h4><p>jmp far ptr 标号 指令，实现的是段间转移，又称远位移。</p>
<p>功能：（CS）=标号处所在段的段地址；（IP）=标号在段中的偏移地址</p>
<p>far ptr指明了，指令用<strong>标号的段地址</strong>和<strong>偏移地址</strong>来修改 CS 和 IP</p>
<h3 id="转移地址在内存中的jmp指令"><a href="#转移地址在内存中的jmp指令" class="headerlink" title="转移地址在内存中的jmp指令"></a>转移地址在内存中的jmp指令</h3><p>转移地址在内存中，jmp指令的两种格式：</p>
<h4 id="jmp-word-ptr-内存单元地址（段内转移）"><a href="#jmp-word-ptr-内存单元地址（段内转移）" class="headerlink" title="jmp word ptr 内存单元地址（段内转移）"></a>jmp word ptr 内存单元地址（段内转移）</h4><p>功能：从内存单元地址处开始存放着一个字，是转递的目的偏移地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,0123h</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">jmp word ptr ds:[0]		//执行结果为 【偏移地址（IP）】，这个偏移地址就是存放的内容ds：[0]</span><br></pre></td></tr></table></figure>

<p>执行后 IP = 0123H。</p>
<h4 id="jmp-dword-ptr-内存单元地址（段间转移）"><a href="#jmp-dword-ptr-内存单元地址（段间转移）" class="headerlink" title="jmp dword ptr 内存单元地址（段间转移）"></a>jmp dword ptr 内存单元地址（段间转移）</h4><p>功能：从内存单元地址处开始存放着两个字，<strong>高地址处</strong>的字是转移的目的的<strong>段地址</strong>，<strong>低地址处</strong>是转移的目的的<strong>偏移地址</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CS = 内存单元地址 + 2</span><br><span class="line">IP = 内存单元地址</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,0123h</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">mov word ptr ds:[2],0</span><br><span class="line">jmp dword ptr ds:[0]</span><br><span class="line">----------------------------------</span><br><span class="line">解读：	ds:[0]，ds:[1] 一起存放0123h的值，ds：[2],ds:[3]存储这0000的值</span><br><span class="line">	【一个字是占两个内存单元】</span><br></pre></td></tr></table></figure>

<p>执行后CS = 0 , IP = 0123H , CS:IP 指向0000：0123</p>
<h3 id="jcxz指令"><a href="#jcxz指令" class="headerlink" title="jcxz指令"></a>jcxz指令</h3><p>前面都是无条件转移指令，jcxz指令为有条件转移指令。所有的<strong>有条件转移指令</strong>都是<strong>短转移</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jcxz 标号 （如果cx=0，转移到标号处执行）</span><br><span class="line">01. cx=0时，IP=IP+8位位移；</span><br><span class="line">02. 8位位移 = 标号处的地址 - jcxz指令后的第一个字节的地址</span><br><span class="line">03. 8位位移的范围 -128~127，用补码表示</span><br><span class="line">04. 8位位移有编译程序在编译时算出</span><br><span class="line">----------------------------------------</span><br><span class="line">cx ≠ 0时，程序向下执行</span><br></pre></td></tr></table></figure>

<p>这个指令就可以实现一些功能比如，在一个内存段中找一个值为0的字节。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">	start: mov ax,2000h</span><br><span class="line">		   mov ds,ax</span><br><span class="line">		   mov bx,0</span><br><span class="line">	s:	   mov cl,ds:[bx]		//cx=ch+cl,低位cl存放bx的值，也就是内存段中的值</span><br><span class="line">		   inc bx				</span><br><span class="line">		   mov ch,0				// 高位ch存放0，就能得到cx的值，下面用jcxz来判断条件</span><br><span class="line">		   jcxz ok</span><br><span class="line">		   jmp short s</span><br><span class="line">	ok:    mov dx,bx</span><br><span class="line">		   mov ax,4c00h</span><br><span class="line">		   int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h3 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h3><p>loop指令为循环指令，所有的循环指令都是短转移。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loop 标号 （cx = cx - 1,如果cx≠0，转移到标号处执行）</span><br><span class="line">01. cx = cx -1</span><br><span class="line">02. 如果cx ≠ 0，IP=IP+8位位移</span><br><span class="line">03. 8位位移 = 标号处的地址 - loop指令后的第一个字节的地址</span><br><span class="line">04. 8位位移的范围 -128~127，用补码表示</span><br><span class="line">05. 8位位移有编译程序在编译时算出</span><br><span class="line">----------------------------------------</span><br><span class="line">cx = 0，程序向下执行</span><br></pre></td></tr></table></figure>

<h1 id="第十章、call和ret指令"><a href="#第十章、call和ret指令" class="headerlink" title="第十章、call和ret指令"></a>第十章、call和ret指令</h1><h3 id="ret和retf指令"><a href="#ret和retf指令" class="headerlink" title="ret和retf指令"></a>ret和retf指令</h3><p>ret指令用<strong>栈中的数据</strong>，修改IP的内容，实现近转移。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CPU执行ret指令时</span><br><span class="line">IP = ss * 16 + sp</span><br><span class="line">sp = sp + 2</span><br><span class="line">-------------------</span><br><span class="line">相当于 pop IP</span><br></pre></td></tr></table></figure>

<p>retf指令用<strong>栈中的数据</strong>，修改CS和IP内容，实现远转移。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CPU执行retf指令时</span><br><span class="line">IP = ss * 16 + sp</span><br><span class="line">sp = sp + 2</span><br><span class="line">CS = ss *16 + sp</span><br><span class="line">sp = sp + 2</span><br><span class="line">--------------------</span><br><span class="line">相当于 pop IP</span><br><span class="line">	  pop CS</span><br></pre></td></tr></table></figure>

<h3 id="call指令"><a href="#call指令" class="headerlink" title="call指令"></a>call指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01. 将当前IP或CS和IP压栈</span><br><span class="line">02. 转移</span><br></pre></td></tr></table></figure>

<h4 id="call-标号（将当前IP压栈，转到标号处执行）"><a href="#call-标号（将当前IP压栈，转到标号处执行）" class="headerlink" title="call 标号（将当前IP压栈，转到标号处执行）"></a>call 标号（将当前IP压栈，转到标号处执行）</h4><p>实际上相当于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push IP</span><br><span class="line">jmp near ptr 标号</span><br></pre></td></tr></table></figure>

<h4 id="call-far-ptr-标号-（段间转移）"><a href="#call-far-ptr-标号-（段间转移）" class="headerlink" title="call far ptr 标号 （段间转移）"></a>call far ptr 标号 （段间转移）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">相当于</span><br><span class="line">push CS</span><br><span class="line">push IP				//先把CS入栈，再把IP入栈</span><br><span class="line">jmp far ptr 标号</span><br></pre></td></tr></table></figure>

<h4 id="call-16位寄存器"><a href="#call-16位寄存器" class="headerlink" title="call 16位寄存器"></a>call 16位寄存器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">相当于</span><br><span class="line">push IP</span><br><span class="line">jmp 16位寄存器</span><br></pre></td></tr></table></figure>

<h3 id="转移地址在内存中的call指令"><a href="#转移地址在内存中的call指令" class="headerlink" title="转移地址在内存中的call指令"></a>转移地址在内存中的call指令</h3><h4 id="call-word-ptr-内存单元地址"><a href="#call-word-ptr-内存单元地址" class="headerlink" title="call word ptr 内存单元地址"></a>call word ptr 内存单元地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">相当于</span><br><span class="line">push IP</span><br><span class="line">jmp word ptr内存单元地址</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov sp,10h</span><br><span class="line">mov ax,0123h</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">call word ptr ds:[0]</span><br><span class="line">------------------------</span><br><span class="line">执行后</span><br><span class="line">IP = 0123H,SP = 0EH（push ip后，sp的值-2）</span><br></pre></td></tr></table></figure>

<h4 id="call-dword-ptr-内存单元地址"><a href="#call-dword-ptr-内存单元地址" class="headerlink" title="call dword ptr 内存单元地址"></a>call dword ptr 内存单元地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">相当于</span><br><span class="line">push CS</span><br><span class="line">push IP</span><br><span class="line">jmp dword ptr 内存单元地址</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov sp,10h</span><br><span class="line">mov ax,0123h</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">mov word ptr ds:[2],0</span><br><span class="line">call dword ptr ds:[0]</span><br><span class="line">-------------------------</span><br><span class="line">执行后</span><br><span class="line">CS = 0, IP = 0123H, SP = 0CH</span><br></pre></td></tr></table></figure>

<h3 id="call和ret配合使用"><a href="#call和ret配合使用" class="headerlink" title="call和ret配合使用"></a>call和ret配合使用</h3><p>这两个命令配合使用，可以很好的将代码划分成各个块。</p>
<p>首先，通过call 标号，来执行相关代码，在代码段的结束位置加上ret，即可回到call下面一行，继续执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">		call s</span><br><span class="line">		jmp ok</span><br><span class="line">		</span><br><span class="line">s: 		一段代码</span><br><span class="line">		ret</span><br><span class="line">ok：		一段代码</span><br></pre></td></tr></table></figure>

<p>call指令就会去执行子程序的内容，在这之前，call指令后面的指令地址会存储在栈中，子程序中使用ret，用栈中的数据设置 IP 的值，就可以返回到call下一行语句。</p>
<h3 id="mul指令（乘法指令）"><a href="#mul指令（乘法指令）" class="headerlink" title="mul指令（乘法指令）"></a>mul指令（乘法指令）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">两个相乘的数字：都是8位，或者都是16位。</span><br><span class="line">8位的相乘：一个默认在al中，另一个在8位寄存器或内存字节单元中；</span><br><span class="line">16位的相乘：一个默认在ax中，另一个在16位寄存器或内存字单元中。</span><br><span class="line">------------------------------------------------------</span><br><span class="line">结果:</span><br><span class="line">8位相乘，结果默认在ax中</span><br><span class="line">16位相乘，结果高位默认在dx中，低位在ax中</span><br></pre></td></tr></table></figure>

<h3 id="寄存器冲突问题"><a href="#寄存器冲突问题" class="headerlink" title="寄存器冲突问题"></a>寄存器冲突问题</h3><p>后面编写代码的时候，会出现寄存器冲突的问题时，例如：在内容过多的情况下，使用的寄存器太多，导致会出现重复使用的情况，这时候寄存器中的数据就会出现错误。解决方法：在需要重复使用该寄存器时，先把寄存器之前的数据内容入栈，然后再使用，在需要用到之前那个值时，再将数据出栈即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.....</span><br><span class="line">	mov cx,12</span><br><span class="line"></span><br><span class="line">s: 	mov ax,ds:[bx]</span><br><span class="line">	inc bx</span><br><span class="line">	call s1</span><br><span class="line">	loop s		//这个地方用到了cx的值</span><br><span class="line"></span><br><span class="line">s1: mov cl,[si]</span><br><span class="line">	mov ch,0</span><br><span class="line">	jcxz ok		//这个地方也用到了cx的值</span><br><span class="line">	</span><br><span class="line">ok: ret</span><br><span class="line"></span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<h1 id="第十一章、标志寄存器"><a href="#第十一章、标志寄存器" class="headerlink" title="第十一章、标志寄存器"></a>第十一章、标志寄存器</h1><h3 id="flag寄存器"><a href="#flag寄存器" class="headerlink" title="flag寄存器"></a>flag寄存器</h3><p>flag寄存器，其他寄存器都是用来存放数据的，flag寄存器是按位起作用的，每一位都有专门的含义。</p>
<p>15    14    13    12    11    10    09    08    07    06    05    04    03    02    01    00</p>
<p>​                                   OF    DF    IF    TF    SF    ZF            AF            PF            CF</p>
<h3 id="ZF标志"><a href="#ZF标志" class="headerlink" title="ZF标志"></a>ZF标志</h3><p>flag的第 6 位，零标志位，指令执行结果为0，ZF = 1，结果不为0，ZF = 0</p>
<h3 id="PF标志"><a href="#PF标志" class="headerlink" title="PF标志"></a>PF标志</h3><p>flag的第 2 位，奇偶标志位，指令执行结果，所有bit位1的个数位偶数，PF = 1；个数位奇数PF = 0</p>
<h3 id="SF标志"><a href="#SF标志" class="headerlink" title="SF标志"></a>SF标志</h3><p>flag的第 7 位，符号标志位，指令执行结果，结果为负，SF = 1；结果非负（即正数和0），SF = 0</p>
<p>运行的结果与运行的数据有关，当成有符号数，和无符号数运行结果不一定相同。</p>
<h3 id="CF标志"><a href="#CF标志" class="headerlink" title="CF标志"></a>CF标志</h3><p>flag的第 0 位，进位标志位，进行无符号数运算时，记录最高有效位是否向更高位进位值，或从更高位借位值。进位或者借位后，CF=1，否则CF=0</p>
<h3 id="OF标志"><a href="#OF标志" class="headerlink" title="OF标志"></a>OF标志</h3><p>flag的第 11 位，溢出标志位，进行有符号数的时候，运算的结果发生了溢出，OF=1；没有溢出OF=0</p>
<p>==============================================================================================</p>
<h3 id="adc指令"><a href="#adc指令" class="headerlink" title="adc指令"></a>adc指令</h3><p>adc是带进位加法指令，利用了CF位上记录的进位值。</p>
<p>指令格式： adc    操作对象1    操作对象2</p>
<p>功能：操作对象1 = 操作对象1 + 操作对象2 + CF（上面计算中的存放CF值）</p>
<h3 id="sbb指令"><a href="#sbb指令" class="headerlink" title="sbb指令"></a>sbb指令</h3><p>sbb是带错位减法指令，利用了CF位上记录的错位值</p>
<p>指令格式：sbb    操作对象1    操作对象2</p>
<p>功能：操作对象1 = 操作对象1 - 操作对象2 - CF</p>
<h3 id="cmp指令"><a href="#cmp指令" class="headerlink" title="cmp指令"></a>cmp指令</h3><p>cmp是比较指令，功能相当于减法指令，但是不保存结果。只是在执行后，对标志寄存器的值进行影响。</p>
<p>指令格式：cmp    操作对象1， 操作对象2</p>
<p>功能：计算操作对象1 - 操作对象 2</p>
]]></content>
      <tags>
        <tag>王爽《汇编语言》</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编基础知识（一）</title>
    <url>/2022/03/25/one/</url>
    <content><![CDATA[<h1 id="第一章、基础知识"><a href="#第一章、基础知识" class="headerlink" title="第一章、基础知识"></a>第一章、基础知识</h1><p>汇编语言相关基础内容（一）</p>
<span id="more"></span>

<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ol>
<li><p>指令：指令由操作码和地址码（操作数）组成</p>
</li>
<li><p>机器指令：CPU能直接识别并执行的二进制编码</p>
</li>
<li><p>汇编指令：机器指令的助记符，同机器指令一一对应</p>
</li>
<li><p>指令集：每种CPU都有自己的汇编指令集</p>
</li>
<li><p>汇编语言由三类指令组成：</p>
<ul>
<li><p>汇编指令；</p>
</li>
<li><p>伪指令：没有对应的机器码，由编译器执行，计算机不执行；</p>
</li>
<li><p>其他符号：+、-、*、/等，由编译器执行，没有对应的机器码；</p>
</li>
</ul>
</li>
<li><p>在内存或磁盘上，指令和数据没有任何区别，都是二进制信息    </p>
</li>
</ol>
<h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><p>随机存储器（RAM）:在程序的执行过程中可读可写，但必须带电存储。</p>
<p>只读存储器（ROM）:在程序的执行过程中只读，关机数据不丢失（只读：所以对ROM的内容修改就无效）</p>
<ul>
<li>RAM：随机储存器（绝大部分程序和数据），还有一部分的接口卡上的RAM（如：显存）</li>
</ul>
<p>​            CPU里面包括如（RAM主储存器，ROM（系统BIOS，显卡BIOS，网卡BIOS），等内容）</p>
<ul>
<li>RAM（显存） ROM（装有显卡BIOS）。</li>
</ul>
<ul>
<li>CPU在操控这些存储器时，当作逻辑存储器，也就是内存地址空间。</li>
</ul>
<h3 id="内存地址空间"><a href="#内存地址空间" class="headerlink" title="内存地址空间"></a>内存地址空间</h3><ul>
<li>内存地址空间的大小与CPU地址总线宽度相关。</li>
</ul>
<ul>
<li>一根导线传送状态两种 0 或者 1。</li>
</ul>
<ul>
<li>10根地址总线，则可以表示2的10次方个数据。</li>
</ul>
<h1 id="第二章、寄存器"><a href="#第二章、寄存器" class="headerlink" title="第二章、寄存器"></a>第二章、寄存器</h1><h3 id="CPU的组成"><a href="#CPU的组成" class="headerlink" title="CPU的组成"></a><strong>CPU</strong>的组成</h3><p>CPU由运算器（信息处理），寄存器（信息储存），控制器（控制器件工作），内部总线（连接器件，数据传送）组成。</p>
<h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>本书所提到的8086CPU都是16位的寄存器，只能存放两个字节（1字节 = 8位）。</p>
<p>通用寄存器：AX、BX、CX、DX</p>
<p>每个通用寄存器都可以拆分位两个8位的寄存器</p>
<p>(X)X都可以分为(X)H、(X)L，前面一个是高位寄存器，后面是低位寄存器。</p>
<h3 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h3><p>CPU在访问内存单元时，需要知道该内存单元的地址。</p>
<p>物理地址 = 段地址 × 16 + 偏移地址            （这个地方乘以16，是因为在内存单元中都是以十六进制数存储）</p>
<p>物理地址 = 基础地址 + 偏移地址</p>
<h4 id="段地址和偏移地址"><a href="#段地址和偏移地址" class="headerlink" title="段地址和偏移地址"></a>段地址和偏移地址</h4><p>CPU中有4个段寄存器：CS、DS、SS、ES</p>
<p>一个内存单元需要确定它的地址，需要知道段地址和偏移地址，段地址由段寄存器来提供，而偏移地址由    IP（指令指针寄存器）来提供。</p>
<p>对CPU的控制，就需要通过指令来实现，指令的内容由CS、IP来决定，就需要我们修改CS、IP的值。</p>
<h3 id="修改CS、IP的值"><a href="#修改CS、IP的值" class="headerlink" title="修改CS、IP的值"></a>修改CS、IP的值</h3><p>同时修改CS、IP的值，就用    jmp 段地址：偏移地址</p>
<p>只修改IP的值，就用    jmp 某一寄存器</p>
<h1 id="第三章、寄存器（内存访问）"><a href="#第三章、寄存器（内存访问）" class="headerlink" title="第三章、寄存器（内存访问）"></a>第三章、寄存器（内存访问）</h1><h3 id="内存中字的存储"><a href="#内存中字的存储" class="headerlink" title="内存中字的存储"></a>内存中字的存储</h3><p>内存中储存的字，从上往下，先是低地址位，再是高地址位。</p>
<p><strong>字单元</strong>：存放一个字形数据16位的内存单元</p>
<p>起始地址为N的字单元，称为N地址字单元</p>
<p><strong>DS寄存器</strong>：用来存放要访问的数据的  <strong>段地址</strong>，</p>
<p>8086CPU中需要用一个寄存器来进行中转数据，到ds寄存器中</p>
<p>mov ax，1000H</p>
<p>mov ds，ax（将数据存入ds中）</p>
<p>mov  al，[0]  (将1000H：0传入al中)</p>
<p>[0]  偏移地址为0，段地址采用前面的ds内部储存的</p>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈   <strong>push（入栈）    pop（出栈</strong>）</p>
<p><strong>段寄存器SS</strong> ：栈顶的段地址储存</p>
<p><strong>寄存器SP</strong>：偏移地址储存</p>
<p>SS:SP   与   CS:IP  类似</p>
<hr>
<p>push ax执行步骤</p>
<ol>
<li><p>SP=SP-2</p>
</li>
<li><p>将ax的内容存放到SS:SP中，SS:SP指向新的栈顶</p>
</li>
</ol>
<p>pop ax与push的相反</p>
<p>pop出栈后，内容还存在，但是不在栈中，等下一次push入栈内容后进行覆盖。</p>
<h4 id="push，pop区别"><a href="#push，pop区别" class="headerlink" title="push，pop区别"></a>push，pop区别</h4><p>pop指令</p>
<p>先执行SS:SP传入数据，再执行SP=SP+2</p>
<p>push指令</p>
<p>先执行SP=SP-2，再执行SS:SP传数据</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax，1000H</span><br><span class="line"></span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">push[0]			//将1000H：0处的字压入栈中</span><br><span class="line"></span><br><span class="line">pop[2]			//出栈，出栈的数据送入1000H：2中</span><br></pre></td></tr></table></figure>



<h3 id="入栈，出栈"><a href="#入栈，出栈" class="headerlink" title="入栈，出栈"></a>入栈，出栈</h3><p>1.给出一个栈的空间大小，需要通过寄存器来确定SS,SP的数值</p>
<p>mov ax,1000H</p>
<p>mov ss,ax</p>
<p>mov sp,0010H    (SP的值是根据栈空间的大小来算的，空栈的时候根据最下面的值来确定)</p>
<p>2.在通过寄存器向内部送入数据</p>
<p>3.再执行入栈和出栈的指令</p>
<hr>
<p>mov指令访问内存单元时，是通过指令直接给出地址的</p>
<p>push，pop是通过ss：sp来给出地址的，同时还要改变sp的值（因为修改的只是sp的值，所以栈顶变化范围为0-FFFFH）</p>
<h3 id="栈段"><a href="#栈段" class="headerlink" title="栈段"></a>栈段</h3><p>编程时，自己定义的，CPU并不会将我们定义的栈段当作栈空间来访问。</p>
<p>如何访问？通过ss:sp来指向。</p>
<p>10000H–1FFFFH当作栈段，栈空间为64KB</p>
<h3 id="汇编指令实验"><a href="#汇编指令实验" class="headerlink" title="汇编指令实验"></a>汇编指令实验</h3><p>对于mov ss,bx     mov ss,[0]        pop ss  等这些指令，输入t执行时，会把下面一下指令一起执行，这些指令都是  <strong>修改栈段寄存器SS的指令</strong>。</p>
<p><strong>Debug中T命令在执行修改寄存器SS的指令时，下一条指令也紧接着被执行</strong></p>
<h1 id="第四章、第一个程序"><a href="#第四章、第一个程序" class="headerlink" title="第四章、第一个程序"></a>第四章、第一个程序</h1><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ul>
<li>编写汇编源程序————生成源程序文本</li>
<li>对源程序进行编译连接————生成可执行文件</li>
<li>执行可执行文件中的程序————执行程序</li>
</ul>
<h3 id="汇编指令："><a href="#汇编指令：" class="headerlink" title="汇编指令："></a>汇编指令：</h3><ul>
<li>伪指令——由编译器执行</li>
<li>汇编指令——由CPU执行</li>
</ul>
<p>代码段中 segment 和 ends 成对使用的伪指令（用来<strong>定义一个段</strong>）</p>
<p>开头部分的 assume （假设某一段<strong>寄存器</strong>和程序某一个<strong>定义的段</strong>来相关联） </p>
<h3 id="程序返回"><a href="#程序返回" class="headerlink" title="程序返回"></a>程序返回</h3><p>mov ax，4c00H</p>
<p>int 21H        //需要用P命令来执行</p>
<h3 id="编辑源程序"><a href="#编辑源程序" class="headerlink" title="编辑源程序"></a>编辑源程序</h3><ol>
<li>进入DOS编辑，保存得到1.asm文件（源程序文件）</li>
<li>用masm编译器，将1.asm编译为1.obj文件</li>
<li>用link连接器，将1.obj文件连接成1.exe文件</li>
</ol>
<hr>
<p>程序在加载到内存的时候，在内存中前256个字节为PSP通信区，后面接着的为程序部分</p>
<p>在内存中开始SA:0，PSP占256字节，程序开始为SA+10H：0</p>
<p>【    SA*16+0+256 = SA * 16 + 16 * 16=(SA+16)*16 + 0      即SA+10H：0    】</p>
<h1 id="第五章、【BX】和loop指令"><a href="#第五章、【BX】和loop指令" class="headerlink" title="第五章、【BX】和loop指令"></a>第五章、【BX】和loop指令</h1><h3 id="bx指令"><a href="#bx指令" class="headerlink" title="bx指令"></a>bx指令</h3><p>bx属于变量型的偏移地址</p>
<p>mov ax，[bx]  段地址在ds中</p>
<p>loop指令——用于循环</p>
<p>先设定一个循环语句</p>
<p>mov cx，4            //设置循环次数</p>
<p>s：add ax,2        //设置循环内容</p>
<p>loop s                    //先执行cx-1，判断是否为0，为0则直接向下执行指令，否则进行循环，回到s的位置</p>
<p>inc bx                   //bx=bx+1</p>
<h3 id="计算FFFF-0006单元中的数值乘3，结果存入dx中"><a href="#计算FFFF-0006单元中的数值乘3，结果存入dx中" class="headerlink" title="计算FFFF:0006单元中的数值乘3，结果存入dx中"></a>计算FFFF:0006单元中的数值乘3，结果存入dx中</h3><ol>
<li>先考虑计算结果存入dx中会不会超出范围</li>
<li>借助中间的一个寄存器ax，但是FFFF:0006单元为一个字节，ax为16为寄存器，数据长度不匹配</li>
<li>ax分为ah，al，将ah=0，al=ffff6H来实现“赋值”（只是使得两边的值相等）</li>
</ol>
<h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><p>循环语句太多需要一步步执行，使用</p>
<p> <strong>g命令</strong> （g 0016——直接跳到cs：0016处执行）</p>
<p><strong>p命令</strong>    （-p即可），就会重复执行循环中的指令，直到cx=0为止</p>
<h3 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h3><p>功能：循环类指令</p>
<p>格式：loop 标号</p>
<p>执行步骤：</p>
<ol>
<li>cx = cx -1</li>
<li>判断cx的值是否为0，为0则向下执行，不为0则转至标号处继续执行程序</li>
</ol>
<h3 id="Debug和编译器对指令会有不同的处理"><a href="#Debug和编译器对指令会有不同的处理" class="headerlink" title="Debug和编译器对指令会有不同的处理"></a>Debug和编译器对指令会有不同的处理</h3><p>[idata]：debug处理为[idata]</p>
<p>​                  编译器处理为 idata</p>
<p>在[idata]前面加上段寄存器的名字即可，在汇编编译器中就能正常运行</p>
<p>向内存中写入数据时，需要确定内存空间是否存放重要数据，不能随意写入内容</p>
<h3 id="loop指令和-bx-使用"><a href="#loop指令和-bx-使用" class="headerlink" title="loop指令和[bx]使用"></a>loop指令和[bx]使用</h3><p>计算ffff：0000 ——ffff：b的数据和，结果存储在dx中。</p>
<h4 id="思考过程"><a href="#思考过程" class="headerlink" title="思考过程"></a>思考过程</h4><ul>
<li><p>首先考虑存储范围，在这段内存单元的数据和不会超过dx的储存范围。（内存单元中的数据为字节型，范围在0-255之间，12个相加不会超过65535）</p>
</li>
<li><p>但这些数据和是8位的，不能直接存储到16位的dx中。</p>
</li>
<li><p>将最后这个8位的数据存储在dl（8位寄存器）中，但最后的结果可能超过8位寄存器的存储。</p>
</li>
<li><p>我们可以通过一个16位的寄存器来完成，将8位的数据赋值到16位寄存器（ax）中，再将ax的值加到dx</p>
<p>如果用dx来接收这些数据，就会出现重复使用，导致其中的值错误，所以需要另外一个16位寄存器。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">	mov ax,0ffffh</span><br><span class="line">	mov ds,ax</span><br><span class="line">	mov bx,0				//ds:[bx]指向第一个数据</span><br><span class="line">	</span><br><span class="line">	mov dx,0				//将寄存器dx清零</span><br><span class="line">	mov cx,12				//设置循环次数12次（从0-b）</span><br><span class="line">	</span><br><span class="line">s:	mov al,ds:[bx]			//将第一个数据送入al中</span><br><span class="line">	mov ah,0				//将ax的高位ah赋值为0</span><br><span class="line">	add dx,ax				//将ax的值与dx相加，结果存在dx中</span><br><span class="line">	inc bx					//bx的值加一</span><br><span class="line">	loop s					</span><br><span class="line">	</span><br><span class="line">	mov ax,4c00h</span><br><span class="line">	int 21h</span><br><span class="line">	</span><br><span class="line">code ends</span><br><span class="line">end</span><br><span class="line">	</span><br></pre></td></tr></table></figure>



<h3 id="段前缀"><a href="#段前缀" class="headerlink" title="段前缀"></a>段前缀</h3><p>段前缀：ds、cs、ss、es    。功能都是与ds类似  ds：[bx] 这种</p>
<p>问题：将ffff:0—ffff:b的数据复制到0：200~0：20b中</p>
<h4 id="思考过程-1"><a href="#思考过程-1" class="headerlink" title="思考过程"></a>思考过程</h4><ul>
<li>0000：0200—0000：020b单元与0020：0000—0020：b描述的是同一段内存空间（计算物理地址结果相同）</li>
<li>可以用两个段前缀来完成数据赋值，设置ds，es两个为这两段的内存空间的段地址，通过[bx]来循环赋值即可</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">	mov ax,0ffffh</span><br><span class="line">	mov ds,ax				//设置ds:[bx]指向第一个数据</span><br><span class="line">	</span><br><span class="line">	mov ax,0020h</span><br><span class="line">	mov es,ax				//设置es:[bx]指向需要复制到的第一个位置</span><br><span class="line">	</span><br><span class="line">	mov bx,0</span><br><span class="line">	mov cx,12				//循环次数</span><br><span class="line">	</span><br><span class="line">s:	mov dl,ds:[bx]			//中间借用一个dl寄存器来存储数据</span><br><span class="line">	mov es:[bx],dl</span><br><span class="line">	inc bx	</span><br><span class="line">	loop s</span><br><span class="line">	</span><br><span class="line">	mov ax,4c00h</span><br><span class="line">	int 21h</span><br><span class="line">	</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>王爽《汇编语言》</tag>
      </tags>
  </entry>
</search>
